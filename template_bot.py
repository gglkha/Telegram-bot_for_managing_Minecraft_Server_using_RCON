# -*- coding: utf-8 -*-
# -------------------------------------------------------------------------
# –®–∞–±–ª–æ–Ω –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º Minecraft
# -------------------------------------------------------------------------

import logging
import re
from functools import wraps
from mcrcon import MCRcon
from mcstatus import JavaServer
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from telegram.constants import ParseMode
from telegram.error import BadRequest

# =========================================================================
# --- –°–ï–ö–¶–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---
# –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–¥ –≤–∞—à –ø—Ä–æ–µ–∫—Ç
# =========================================================================

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather
TELEGRAM_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"

# –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É
# –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @userinfobot
ALLOWED_USER_IDS = [123456789, 987654321]

# -- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Minecraft-—Å–µ—Ä–≤–µ—Ä—É --
# IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
RCON_HOST = "YOUR_SERVER_IP_OR_DOMAIN"
# RCON –ø–æ—Ä—Ç (–æ–±—ã—á–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∏–≥—Ä–æ–≤–æ–≥–æ)
RCON_PORT = 25575
# RCON –ø–∞—Ä–æ–ª—å –∏–∑ server.properties
RCON_PASSWORD = "YOUR_RCON_PASSWORD"
# –ò–≥—Ä–æ–≤–æ–π –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–∞)
GAME_PORT = 25565

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# =========================================================================
# --- –°–õ–£–ñ–ï–ë–ù–´–ï –£–¢–ò–õ–ò–¢–´ –ò –î–ï–ö–û–†–ê–¢–û–†–´ ---
# –≠—Ç—É —á–∞—Å—Ç—å –æ–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ —Ç—Ä–æ–≥–∞—Ç—å
# =========================================================================

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram MarkdownV2."""
    if not isinstance(text, str): text = str(text)
    escape_chars = r'_*[]()~`>#+=-|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

def restricted(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π."""
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id not in ALLOWED_USER_IDS:
            logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        action_name = func.__name__
        if update.callback_query: action_name = update.callback_query.data
        elif update.message: action_name = update.message.text
        logger.info(f"–ê–¥–º–∏–Ω {update.effective_user.first_name} ({user_id}) -> –î–µ–π—Å—Ç–≤–∏–µ: {action_name}")
        return await func(update, context, *args, **kwargs)
    return wrapped

# =========================================================================
# --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø –° MINECRAFT ---
# =========================================================================

async def execute_rcon(command: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç RCON –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
    try:
        with MCRcon(RCON_HOST, RCON_PASSWORD, port=RCON_PORT, timeout=5) as mcr:
            resp = mcr.command(command)
            # –£–¥–∞–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã Minecraft –∏–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
            return re.sub(r'¬ß[0-9a-fk-or]', '', resp) if resp else "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ RCON: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ RCON: {e}"

async def get_online_players() -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∏–∫–æ–≤ –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω."""
    resp = await execute_rcon('list')
    if "There are 0 of a max" in resp or not ":" in resp: return []
    try:
        players_str = resp.split(":", 1)[1]
        return [p.strip() for p in players_str.split(",")]
    except IndexError: return []

# =========================================================================
# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–û–ú –ë–û–¢–ê (UI) ---
# =========================================================================

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str = None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—è –Ω–æ–≤–æ–µ."""
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", callback_data="menu_status")],
        [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º", callback_data="menu_server")],
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏", callback_data="menu_players")],
        [InlineKeyboardButton("üåç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏—Ä–æ–º", callback_data="menu_world")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="menu_about")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if message_text is None:
        message_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {escape_markdown(update.effective_user.first_name)}\\! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∏, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if query:
        try:
            await query.edit_message_text(text=message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
        except BadRequest as e:
            if "Message is not modified" not in str(e): logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        await update.message.reply_text(text=message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)

@restricted
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    context.user_data.clear()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'reply_keyboard_sent' not in context.user_data:
        await update.message.reply_text("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.", reply_markup=ReplyKeyboardMarkup([["/start"]], resize_keyboard=True))
        context.user_data['reply_keyboard_sent'] = True
    await show_main_menu(update, context)

# =========================================================================
# --- –õ–û–ì–ò–ö–ê –†–ê–ë–û–¢–´ –ú–ï–ù–Æ ---
# =========================================================================

@restricted
async def button_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    action, *params = query.data.split(':')

    # –°–ª–æ–≤–∞—Ä—å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ–Ω—é
    menu_handlers = {
        "menu_main": show_main_menu,
        "menu_status": status_handler,
        "menu_server": server_menu_handler,
        "menu_players": players_menu_handler,
        "menu_world": world_menu_handler,
        "menu_about": about_menu_handler,
    }

    if action in menu_handlers:
        await menu_handlers[action](update, context)
    elif action == "action": # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ–¥–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ
        await action_handler(update, context, params)
    elif action == "wizard": # –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö, –ø–æ—à–∞–≥–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        await wizard_handler(update, context, params)

# --- –§—É–Ω–∫—Ü–∏–∏, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–µ –∫–∞–∂–¥–æ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–¥–º–µ–Ω—é ---

async def status_handler(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞."""
    try:
        server = JavaServer.lookup(f"{RCON_HOST}:{GAME_PORT}", timeout=3)
        status = await server.async_status()
        players_list = await get_online_players()
        player_text = "\n\n*–ò–≥—Ä–æ–∫–∏ –æ–Ω–ª–∞–π–Ω:*\n" + "\n".join([f"\\- ``{p}``" for p in players_list]) if players_list else ""
        motd_escaped = escape_markdown(status.description)
        text = (f"‚úÖ *–°–µ—Ä–≤–µ—Ä –û–ù–õ–ê–ô–ù*\n\n_{motd_escaped}_\n\n"
                f"‚öôÔ∏è *–í–µ—Ä—Å–∏—è:* {escape_markdown(status.version.name)}\n"
                f"üë• *–ò–≥—Ä–æ–∫–∏:* {status.players.online} / {status.players.max}{player_text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        text = f"‚ùå *–°–µ—Ä–≤–µ—Ä –û–§–§–õ–ê–ô–ù*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç `{escape_markdown(RCON_HOST)}:{GAME_PORT}`"
    await show_main_menu(update, context, text)

async def server_menu_handler(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º."""
    keyboard = [
        [InlineKeyboardButton("‚öôÔ∏è –†–µ—Å—Ç–∞—Ä—Ç (—á–µ—Ä–µ–∑ /stop)", callback_data="action:confirm:stop")],
        [InlineKeyboardButton("üîå –°–ø–∏—Å–æ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤", callback_data="action:show:plugins")],
        [InlineKeyboardButton("üïπÔ∏è –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º", callback_data="wizard:console:start")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="menu_main")],
    ]
    await update.callback_query.edit_message_text("‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º*", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)

async def players_menu_handler(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º–∏."""
    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω", callback_data="action:show:players_list")],
        [InlineKeyboardButton("‚öñÔ∏è –ù–∞–∫–∞–∑–∞–Ω–∏—è (–ë–∞–Ω/–ö–∏–∫)", callback_data="wizard:punishment_menu")],
        [InlineKeyboardButton("üìú –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ (Whitelist)", callback_data="wizard:whitelist_menu")],
        [InlineKeyboardButton("üïπÔ∏è –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –∏–≥—Ä—ã", callback_data="wizard:gamemode_select_player")],
        [InlineKeyboardButton("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ (OP)", callback_data="wizard:op_menu")],
        [InlineKeyboardButton("‚úâÔ∏è –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="wizard:msg_select_player")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="menu_main")]
    ]
    await update.callback_query.edit_message_text("üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏*", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)

async def world_menu_handler(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏—Ä–æ–º."""
    keyboard = [
        [InlineKeyboardButton("‚è≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º", callback_data="wizard:time_menu")],
        [InlineKeyboardButton("üå¶Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≥–æ–¥–æ–π", callback_data="wizard:weather_menu")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="menu_main")],
    ]
    await update.callback_query.edit_message_text("üåç *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏—Ä–æ–º*", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)

async def about_menu_handler(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –µ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö."""
    text = (
        "‚ÑπÔ∏è *–û –±–æ—Ç–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª RCON –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä\\.\n\n"
        "‚úÖ *–ß—Ç–æ –ú–û–ñ–ù–û –¥–µ–ª–∞—Ç—å:*\n"
        "\\- –í—ã–ø–æ–ª–Ω—è—Ç—å –ª—é–±—ã–µ –∏–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã\n"
        "\\- –£–ø—Ä–∞–≤–ª—è—Ç—å –∏–≥—Ä–æ–∫–∞–º–∏ –∏ –º–∏—Ä–æ–º\n"
        "\\- –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π `/stop`\n\n"
        "‚ùå *–ß—Ç–æ –ù–ï–õ–¨–ó–Ø –¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞:*\n"
        "\\- *–£–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª–∞–º–∏*: –ó–∞–≥—Ä—É–∂–∞—Ç—å/—É–¥–∞–ª—è—Ç—å –ø–ª–∞–≥–∏–Ω—ã, –º–æ–¥—ã, –∫–∞—Ä—Ç—ã\\.\n"
        "\\- *–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã*: –£–∑–Ω–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM/CPU —Å–µ—Ä–≤–µ—Ä–∞\\.\n\n"
        "_–í—Å—ë —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ FTP/SFTP –∏–ª–∏ –ø–∞–Ω–µ–ª—å –≤–∞—à–µ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞\\._"
    )
    keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="menu_main")]]
    await update.callback_query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)

async def action_handler(update, context, params):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, —Ç–∞–∫–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    action_type, command, *args = params
    query = update.callback_query
    text = ""
    if action_type == "confirm":
        confirm_texts = {'stop': "üö® *–†–ï–°–¢–ê–†–¢ –°–ï–†–í–ï–†–ê*\n\n–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ `/stop`\\. –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ö–æ—Å—Ç–∏–Ω–≥–æ–≤ *–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—è—Ç* —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ\\. –î–ª—è *–ø–æ–ª–Ω–æ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è* –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å —Ö–æ—Å—Ç–∏–Ω–≥–∞\\. –í—ã —É–≤–µ—Ä–µ–Ω—ã?"}
        keyboard = [[InlineKeyboardButton("–î–∞, —Ä–µ—Å—Ç–∞—Ä—Ç", callback_data=f"action:exec:{command}"), InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="menu_server")]]
        await query.edit_message_text(confirm_texts[command], reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)
        return
    elif action_type == "exec":
        command_str = command + (" " + " ".join(args) if args else "")
        response = await execute_rcon(command_str)
        text = f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ `{escape_markdown(command_str)}`\n\n*–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:*\n`{escape_markdown(response)}`"
    elif action_type == "show":
        if command == "plugins":
            response = await execute_rcon("plugins")
            text = f"üîå *–°–ø–∏—Å–æ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤:*\n`{escape_markdown(response)}`\n\n_–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ –ø–ª–∞–≥–∏–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å —Ö–æ—Å—Ç–∏–Ω–≥–∞\\._"
        elif command == "players_list":
            players = await get_online_players()
            text = "*–ò–≥—Ä–æ–∫–∏ –æ–Ω–ª–∞–π–Ω:*\n" + "\n".join([f"\\- ``{p}``" for p in players]) if players else "–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω\\."
    await show_main_menu(update, context, text)

async def wizard_handler(update, context, params):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–µ, –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–º–∞—Å—Ç–µ—Ä–∞)."""
    step, *args = params
    query = update.callback_query
    
    # --- –ú–∞—Å—Ç–µ—Ä: –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º ---
    if step == "console":
        if args[0] == "start":
            context.user_data['console_mode'] = True
            keyboard = [[InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∫–æ–Ω—Å–æ–ª–∏", callback_data="wizard:console:stop")]]
            message = await query.edit_message_text("üïπÔ∏è *–†–µ–∂–∏–º –∫–æ–Ω—Å–æ–ª–∏*\n\n–û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã\\.\\.\\.", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)
            context.user_data['console_message_id'] = message.message_id
        elif args[0] == "stop":
            context.user_data.pop('console_mode', None)
            context.user_data.pop('console_message_id', None)
            await show_main_menu(update, context, "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∫–æ–Ω—Å–æ–ª–∏")
        return

    # --- –û–±—â–∏–π –º–∞—Å—Ç–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤ ---
    player_wizards = {
        "op_select_player": ("–í—ã–¥–∞—Ç—å OP", "op_exec", "op_prompt", "wizard:op_menu"),
        "deop_select_player": ("–ó–∞–±—Ä–∞—Ç—å OP", "deop_exec", "deop_prompt", "wizard:op_menu"),
        "msg_select_player": ("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", "msg_prompt_message", None, "menu_players"),
        "gamemode_select_player": ("–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –∏–≥—Ä—ã", "gamemode_select_mode", None, "menu_players"),
        "kick_select_player": ("–ö–∏–∫–Ω—É—Ç—å –∏–≥—Ä–æ–∫–∞", "kick_exec", None, "wizard:punishment_menu"),
        "ban_select_player": ("–ó–∞–±–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞", "ban_prompt_reason", "ban_prompt", "wizard:punishment_menu"),
        "whitelist_add_select_player": ("–î–æ–±–∞–≤–∏—Ç—å –≤ WL", "whitelist_add_exec", "whitelist_add_prompt", "wizard:whitelist_menu"),
        "whitelist_remove_select_player": ("–£–¥–∞–ª–∏—Ç—å –∏–∑ WL", "whitelist_remove_exec", "whitelist_remove_prompt", "wizard:whitelist_menu")
    }
    if step in player_wizards:
        title, exec_action, manual_action, back_menu = player_wizards[step]
        players = await get_online_players()
        keyboard = [[InlineKeyboardButton(p, callback_data=f"wizard:{exec_action}:{p}")] for p in players]
        if not players:
            prompt_text = f"–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è '{escape_markdown(title)}'\\. –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∏–∫ –≤—Ä—É—á–Ω—É—é\\."
            keyboard = [[InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –Ω–∏–∫ –≤—Ä—É—á–Ω—É—é", callback_data=f"wizard:{manual_action}") if manual_action else None], [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=back_menu)]]
            keyboard = [row for row in keyboard if row[0] is not None] # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏
            await query.edit_message_text(prompt_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)
            return

        if manual_action: keyboard.append([InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –Ω–∏–∫ –≤—Ä—É—á–Ω—É—é", callback_data=f"wizard:{manual_action}")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=back_menu)])
        await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è '{escape_markdown(title)}':", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # --- –ü—Ä—è–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ ---
    if step in ["op_exec", "deop_exec", "kick_exec", "whitelist_add_exec", "whitelist_remove_exec"]:
        player = args[0]
        commands = {"op_exec": "op", "deop_exec": "deop", "kick_exec": "kick", 
                    "whitelist_add_exec": "whitelist add", "whitelist_remove_exec": "whitelist remove"}
        cmd = commands[step]
        response = await execute_rcon(f"{cmd} {player}")
        await show_main_menu(update, context, f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ `{cmd} {escape_markdown(player)}`\n\n*–û—Ç–≤–µ—Ç:*\n`{escape_markdown(response)}`")
    
    # --- –®–∞–≥–∏ –º–∞—Å—Ç–µ—Ä–æ–≤ ---
    elif step == "ban_prompt_reason":
        context.user_data.update({'selected_player': args[0], 'next_action': 'ban_reason'})
        await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ``{escape_markdown(args[0])}`` (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `-` –¥–ª—è –±–∞–Ω–∞ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã):")
    elif step == "gamemode_select_mode":
        context.user_data['selected_player'] = args[0]
        gamemode_map = {'c': 'creative', 's': 'survival', 'a': 'adventure', 'sp': 'spectator'}
        keyboard = [[InlineKeyboardButton(f"{v.capitalize()} ({k})", callback_data=f"wizard:gamemode_exec:{v}")] for k, v in gamemode_map.items()]
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="wizard:gamemode_select_player")])
        await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–ª—è ``{escape_markdown(args[0])}``:", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)
    elif step == "gamemode_exec":
        mode, player = args[0], context.user_data.pop('selected_player', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        response = await execute_rcon(f"gamemode {mode} {player}")
        await show_main_menu(update, context, f"–ò–≥—Ä–æ–∫—É ``{escape_markdown(player)}`` —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º *{escape_markdown(mode)}*\\.\n\n*–û—Ç–≤–µ—Ç:*\n`{escape_markdown(response)}`")
    elif step == "msg_prompt_message":
        context.user_data.update({'selected_player': args[0], 'next_action': 'msg'})
        await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ``{escape_markdown(args[0])}``:")

    # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–º–µ–Ω—é ---
    elif step in ["op_menu", "punishment_menu", "whitelist_menu", "time_menu", "weather_menu"]:
        menu_map = {
            "op_menu": ("üëë *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ OP*", [[InlineKeyboardButton("üëë –í—ã–¥–∞—Ç—å OP", callback_data="wizard:op_select_player")], [InlineKeyboardButton("üö´ –ó–∞–±—Ä–∞—Ç—å OP", callback_data="wizard:deop_select_player")], [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="menu_players")]]),
            "punishment_menu": ("‚öñÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è–º–∏*", [[InlineKeyboardButton("üö∑ –ö–∏–∫–Ω—É—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="wizard:kick_select_player")], [InlineKeyboardButton("üö´ –ó–∞–±–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="wizard:ban_select_player")], [InlineKeyboardButton("üîì –†–∞–∑–±–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="wizard:unban_prompt")], [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="menu_players")]]),
            "whitelist_menu": ("üìú *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º*", [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ WL", callback_data="wizard:whitelist_add_select_player")], [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∏–∑ WL", callback_data="wizard:whitelist_remove_select_player")], [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å WL", callback_data="action:exec:whitelist list")], [InlineKeyboardButton("‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å WL", callback_data="action:exec:whitelist on"), InlineKeyboardButton("‚èπÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å WL", callback_data="action:exec:whitelist off")], [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="menu_players")]]),
            "time_menu": ("‚è≥ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º*", [[InlineKeyboardButton("–†–∞—Å—Å–≤–µ—Ç (0)", callback_data="action:exec:time set 0"), InlineKeyboardButton("–ü–æ–ª–¥–µ–Ω—å (6000)", callback_data="action:exec:time set 6000")], [InlineKeyboardButton("–ó–∞–∫–∞—Ç (12000)", callback_data="action:exec:time set 12000"), InlineKeyboardButton("–ù–æ—á—å (18000)", callback_data="action:exec:time set 18000")], [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤—Ä–µ–º—è –≤ —Ç–∏–∫–∞—Ö", callback_data="wizard:time_prompt_ticks")], [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="menu_world")]]),
            "weather_menu": ("üå¶Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≥–æ–¥–æ–π*", [[InlineKeyboardButton("‚òÄÔ∏è –Ø—Å–Ω–æ", callback_data="action:exec:weather clear")], [InlineKeyboardButton("üíß –î–æ–∂–¥—å", callback_data="action:exec:weather rain")], [InlineKeyboardButton("‚ö°Ô∏è –ì—Ä–æ–∑–∞", callback_data="action:exec:weather thunder")], [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="menu_world")]])}
        title, keyboard_layout = menu_map[step]
        await query.edit_message_text(title, reply_markup=InlineKeyboardMarkup(keyboard_layout), parse_mode=ParseMode.MARKDOWN_V2)
    
    # --- –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ ---
    prompts = {'op_prompt': ('op', "üëë –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –¥–ª—è –≤—ã–¥–∞—á–∏ OP:"), 'deop_prompt': ('deop', "üö´ –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –¥–ª—è —Å–Ω—è—Ç–∏—è OP:"),
               'time_prompt_ticks': ('time_ticks', "‚è≥ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ç–∏–∫–∞—Ö:"), 'ban_prompt': ('ban', "üö´ –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –¥–ª—è –±–∞–Ω–∞:"),
               'unban_prompt': ('unban', "üîì –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:"), 'whitelist_add_prompt': ('whitelist_add', "‚ûï –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ WL:"),
               'whitelist_remove_prompt': ('whitelist_remove', "‚ûñ –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ WL:")}
    if step in prompts:
        context.user_data['next_action'] = prompts[step][0]
        await query.edit_message_text(escape_markdown(prompts[step][1]))

# =========================================================================
# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ---
# =========================================================================
@restricted
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä—è–º–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã."""
    user_text = update.message.text
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if context.user_data.get('console_mode'):
        chat_id = update.effective_chat.id
        message_id = context.user_data.get('console_message_id')
        await update.message.delete()
        if not message_id: return
        response = await execute_rcon(user_text)
        console_text = f"üïπÔ∏è *–†–µ–∂–∏–º –∫–æ–Ω—Å–æ–ª–∏*\n\n_–ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞:_\n> ``{escape_markdown(user_text)}``\n\n_–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:_\n```\n{escape_markdown(response)}\n```"
        keyboard = [[InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∫–æ–Ω—Å–æ–ª–∏", callback_data="wizard:console:stop")]]
        try:
            await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=console_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)
        except BadRequest as e:
            if "Message is not modified" not in str(e): logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏: {e}")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã (wizard)
    if 'next_action' in context.user_data:
        action = context.user_data.pop('next_action')
        command = ""
        if action == 'msg':
            player = context.user_data.pop('selected_player', None)
            if player: command = f"msg {player} {user_text}"
        elif action == 'ban_reason':
            player = context.user_data.pop('selected_player', None)
            reason = user_text if user_text != '-' else ''
            if player: command = f"ban {player} {reason}"
        else:
            actions_map = {'op': f"op {user_text}", 'deop': f"deop {user_text}", 'time_ticks': f"time set {user_text}", 'ban': f"ban {user_text}",
                           'unban': f"pardon {user_text}", 'whitelist_add': f"whitelist add {user_text}", 'whitelist_remove': f"whitelist remove {user_text}"}
            command = actions_map.get(action)
        if command:
            response = await execute_rcon(command)
            try: await update.message.delete()
            except Exception: pass
            await show_main_menu(update, context, f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ\\.\n\n*–û—Ç–≤–µ—Ç:*\n`{escape_markdown(response)}`")

# =========================================================================
# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
# =========================================================================
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–±–∏—Ä–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_router))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    
    logger.info("–ë–æ—Ç 'Elite Panel Template' –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()